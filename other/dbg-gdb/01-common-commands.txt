* Common Commands

=> RUN
-  run argv <bash   	: can run program like would run from bash
-  set args <x>		: set argumet to <x>
-  continue or c	: run from current line to next breakpoint or watch value change
-  reverse continue	: reverse till break point or watch
-  finish		: stop the code when current frame/func ends
-  target record-full   : record every changes from now on 		// to see previous commands
-  reverse-next		: undo previous line (and exec from there)	//rn: wont work w/o record
-  set var <x> = val	: set value of variable x = val at runtime

=> BREAKPOINTS (b)
-  break <point>	: break at a fuction or a line
-  clear <point>	: clears a break point
-  info breakpoints	: print all breakpoints				// i b
-  delete <breakID>	: deletes the breakpoint with breakID		// delete all: delete
-  how to break at first err?

=> NAVIGATE
-  next or n		: go to next line (execute current line)
-  step or s 		: step into a function 
-  up/down		: move up and down the call stack
-  how to go to previous line and undo current results?

=> PRINT (p)
-  print <var>		: print value of current <var> 			// can also be expression like a+b
-  print result@x	: print result (use of x?)
-  print *array@x	: print whole dereferenced array (x = size)	// w/o * for mem addresses
-  print array[x]	: print value of array at index x
-  display <var>	: print <var> after every command		// undisplay <varID> how see varid
-  watch <var>		: print <var> anytime its value changes		// how filter all? how see $*?
-  what <var>		: prints type of <var>				// whatis or what
-  list or l <line>	: prints code lines around current one
-  backtrace or bt	: print the entire callstack unitl now

=> TUI:
-  layout next		: view other code 				// for c code 
-  layout asm		: view assembly code				// for assembly code
-  refresh		: refresh layout
-  up/down		: scroll through source code
